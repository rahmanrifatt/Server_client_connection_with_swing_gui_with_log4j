package com.eGen;

import java.awt.Color;
import java.awt.Font;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.nio.ByteBuffer;
import javax.swing.table.DefaultTableModel;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author MDRIFATURRAHMANMRIDH
 */
public class model_gui_Server2 extends javax.swing.JFrame {
    private ServerRunnable serverRunnable;
    private Thread serverThread;
    private static Logger logger = LogManager.getLogger(model_gui_Server2.class.getName());


    /**
     * Creates new form model_gui_Server2
     */
    public model_gui_Server2() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtfield_port = new javax.swing.JTextField();
        btn_connection = new javax.swing.JButton();
        btn_disconnect = new javax.swing.JButton();
        connection_flag = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jscrol = new javax.swing.JScrollPane();
        table_DAta = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("port: ");

        txtfield_port.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtfield_portActionPerformed(evt);
            }
        });

        btn_connection.setText("connection");
        btn_connection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_connectionActionPerformed(evt);
            }
        });

        btn_disconnect.setText("disconnect");
        btn_disconnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_disconnectActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setText("host");

        table_DAta.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "data"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jscrol.setViewportView(table_DAta);

        jLabel2.setText("server status:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(txtfield_port, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(54, 54, 54)
                .addComponent(btn_connection)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(394, 394, 394))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(68, 68, 68)
                        .addComponent(btn_disconnect)
                        .addGap(28, 28, 28)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                        .addComponent(connection_flag, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27))))
            .addComponent(jscrol)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtfield_port, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)
                            .addComponent(btn_connection)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(connection_flag, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(btn_disconnect)
                                .addComponent(jLabel2)))))
                .addGap(11, 11, 11)
                .addComponent(jscrol, javax.swing.GroupLayout.DEFAULT_SIZE, 411, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void txtfield_portActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtfield_portActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtfield_portActionPerformed

    private void btn_connectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_connectionActionPerformed
 logger.info("connection button clicked"); //ok                                           
        // TODO add your handling code here:
       int portNumber;
        try {
            portNumber = Integer.parseInt(txtfield_port.getText());
            serverRunnable = new ServerRunnable(portNumber);
            
            serverThread = new Thread(serverRunnable);
            serverThread.start();
           
        } catch (NumberFormatException e) {
            System.out.println("Invalid port number\n");
            connection_flag.setText("Invalid port number");
            connection_flag.setForeground(Color.RED);
             connection_flag.setFont(new Font("Serif", Font.BOLD, 16));
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_btn_connectionActionPerformed

    private void btn_disconnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_disconnectActionPerformed
 logger.info("disconnect button clicked");                                           
        if (serverRunnable != null) {
            serverRunnable.stopServer();
            btn_connection.setText("connection");
            btn_connection.setBackground(Color.RED);
            connection_flag.setText("Server stopped");
            connection_flag.setForeground(Color.RED);
             connection_flag.setFont(new Font("Serif", Font.BOLD, 16));
            //serverThread.stop();
            
        }       
        

// TODO add your handling code here:
    }//GEN-LAST:event_btn_disconnectActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(model_gui_Server2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(model_gui_Server2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(model_gui_Server2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(model_gui_Server2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new model_gui_Server2().setVisible(true);
            }
        });
    }
    
    
    class ServerRunnable implements Runnable {

        private final int portNumber;
        private ServerSocket serverSocket = null;
        private Socket socket = null;
        private DataInputStream dis = null;
        private DataOutputStream dos = null;
        private volatile boolean running = true;

        public ServerRunnable(int portNumber) {
            this.portNumber = portNumber;
            logger.info("ServerRunnable constructor calld");
        }

        @Override
        public void run() {
            logger.info("new thread run");
            try {
                serverSocket = new ServerSocket(portNumber);
                connection_flag.setText("Server started on port " + portNumber + "\n");
                connection_flag.setForeground(Color.BLUE);
                connection_flag.setFont(new Font("Serif", Font.BOLD, 16));

                while (running) {
                    socket = serverSocket.accept();
                    logger.info("socket accepted");
                    btn_connection.setText("connected");
                    btn_connection.setBackground(Color.GREEN);
                   

                    dis = new DataInputStream(socket.getInputStream());
                    dos = new DataOutputStream(socket.getOutputStream());
                    ByteBuffer buffer = ByteBuffer.allocate(1024);
                    StringBuilder msg = new StringBuilder();

                    while (running) {
                        buffer.clear();
                        if (buffer.isReadOnly()) {
                            buffer.flip();
                        }
                        while (dis.available() > 0 && buffer.hasRemaining()) {
                            buffer.put(dis.readByte());
                        }
                        buffer.flip();
                        while (buffer.hasRemaining()) {
                            byte clientMessage = buffer.get();
                            if (clientMessage == Astm.ENQ) {
                                msg.append((char) clientMessage);
                                DefaultTableModel model = (DefaultTableModel) table_DAta.getModel();
                                model.addRow(new Object[]{msg.toString()});
                                dos.writeByte(Astm.ACK);
                                logger.info("ENQ except:"+msg.toString());
                                msg.setLength(0);
                            } else if (clientMessage == Astm.EOT) {
                                logger.info("EOT except:"+msg.toString());
                                msg.append((char) clientMessage);
                            } else {
                                if (clientMessage == Astm.STX) {
                                    msg.append((char) clientMessage);
                                    logger.info("STX except:"+msg.toString());
                                } else if (clientMessage == Astm.LF) {
                                    msg.append((char) clientMessage);
                                    logger.info("LF except:"+msg.toString());
                                    System.out.println(msg);
                                    DefaultTableModel model = (DefaultTableModel) table_DAta.getModel();
                                    model.addRow(new Object[]{msg.toString()});
                                    logger.info("data added to table ");
                                    msg.setLength(0);
                                    dos.writeByte(Astm.ACK);
                                } else {
                                    msg.append((char) clientMessage);
                                }
                            }
                        }
                    }
                }
            } catch (IOException e) {
                System.out.println(e);
                System.out.println("IOException: " + e.getMessage() + "\n");
            }
            //finally {
//                stopServer();
//            }
        }

        public void stopServer() {
          // running = false;
            try {
                if (dis != null) {
                    dis.close();
                    logger.info("Dis closed");
                }
                if (dos != null) {
                    dos.close();
                    logger.info("DOS closed");
                }
                if (socket != null) {
                    socket.close();
                    logger.info("SOCKET closed");
                }
                if (serverSocket != null) {
                    serverSocket.close();
                    logger.info("SERVERSOCKET closed");
                }

                if (running==true) {
                    serverThread.stop();
                    running=false;
                    System.gc();
                    
                }

                logger.info("check the server is stop or not"+serverThread.isAlive());
               
            } catch (IOException e) {
                System.out.println("Error while closing resources: " + e.getMessage());
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_connection;
    private javax.swing.JButton btn_disconnect;
    private javax.swing.JLabel connection_flag;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jscrol;
    private javax.swing.JTable table_DAta;
    private javax.swing.JTextField txtfield_port;
    // End of variables declaration//GEN-END:variables
}
